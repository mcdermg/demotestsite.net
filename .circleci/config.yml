version: 2.1

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build_demo:
          filters:
            branches:
              only:
                #- garysite
                - seleniumTest
      - demo_test:
          requires:
            - build_demo
      - build_live:
          filters:
            branches:
              only:
                #- garysite
                - seleniumTest
          requires:
            - demo_test

jobs:
  build_demo:
    docker:
      - image: node
    working_directory: ~/demotestsite.net
    steps:
      - checkout
      - run:
          name: Install Hexo CLI
          command: npm install -g hexo-cli
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: npm-deps-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Generate static website
          command: hexo generate
      - run:
          name: Install PIP
          command: |
            apt-get update
            apt-get install python-pip -y
      - run:
          name: Pip Install AWS CLI
          command: pip install awscli
      - run:
          name: Push to S3 bucket
          command: cd public/ && aws s3 sync . s3://www.demotestsite.net --region ca-central-1 --acl public-read

  demo_test:
    docker:
      - image: selenium/standalone-chrome
    working_directory: ~/testing
    steps:
      - checkout
      - run:
          name: Install PIP
          command: |
            sudo apt-get update
            sudo apt-get install python-pip -y
      - run:
          name: Pip Install selienium
          command: pip install selenium
      - run:
          name: Create artifact directory for test results
          command: mkdir ~/testing/tests/screenshots
      - run:
          name: run python test 1
          command: cd tests/ && python sitetest1.py
      - run:
          name: run python test 2
          command: cd tests/ && python sitetest2.py
      - store_artifacts:
          path: ~/testing/tests/screenshots
          destination: test-screenshots

  build_live:
    docker:
      - image: node
    working_directory: ~/website
    steps:
      - checkout
      - run:
          name: Install Hexo CLI
          command: npm install -g hexo-cli
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: npm-deps-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Generate static website
          command: hexo generate
      - run:
          name: Install PIP
          command: |
            apt-get update
            apt-get install python-pip -y
      - run:
          name: Pip Install AWS CLI
          command: pip install awscli
      # TODO probably nt needed, more to do with CDN caching see https://medium.com/@yagonobre/automatically-invalidate-cloudfront-cache-for-site-hosted-on-s3-3c7818099868
      #- run:
      #    name: Clean down bucket
      #    command: aws s3 rm s3://garymcdermott.net --recursive --region eu-west-1
      - run:
          name: Push to S3 bucket
          command: cd public/ && aws s3 sync . s3://garymcdermott.net --region eu-west-1 --acl public-read

#description: |
#  Raise a CircleCI event to Datadog upon a successful job
#
#commands:
#  deploy:
#    description: |
#      Notify Datadog of the deploy event via cURL
#
#    parameters:
#      datadog-api:
#        description: The Datadog API key
#        type: string
#        default: ${DATADOG_API_KEY}
#      environment:
#        description: The Datadog environment tag value
#        type: string
#        default: ${ENV}
#
#    steps:
#      - run:
#          name: Datadog - Setting Success Condition
#          command: |
#            echo 'export DATADOG_BUILD_STATUS="success"' >> $BASH_ENV
#          when: on_success
#      - run:
#          name: Datadog - Sending Event
#          command: |
#            #If successful
#            if [ "$DATADOG_BUILD_STATUS" = "success" ]; then
#              curl  -X POST -H "Content-type: application/json" \
#              --data "{
#                    \"title\": \"Successful CircleCI Deploy\",
#                    \"text\": \"Branch $CIRCLE_BRANCH of $CIRCLE_PROJECT_REPONAME was successfully deployed by $CIRCLE_USERNAME (Build #$CIRCLE_BUILD_NUM). See the job here: $CIRCLE_BUILD_URL\",
#                    \"priority\": \"normal\",
#                    \"tags\": [
#                    	\"environment:<< parameters.environment >>\",
#                    	\"repository:$CIRCLE_PROJECT_REPONAME\",
#                    	\"branch:$CIRCLE_BRANCH\",
#                    	\"build_num:$CIRCLE_BUILD_NUM\",
#                    	\"job:$CIRCLE_JOB\",
#                    	\"started_by:$CIRCLE_USERNAME\"
#                		],
#                    \"alert_type\": \"success\",
#                    \"source_type_name\": \"CIRCLECI\",
#                    \"aggregation_key\": \"circleci_deploys\"
#              }" \
#              "https://api.datadoghq.com/api/v1/events?api_key=<< parameters.datadog-api >>"
#            fi
